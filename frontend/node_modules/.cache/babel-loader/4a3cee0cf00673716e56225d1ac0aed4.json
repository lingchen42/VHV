{"ast":null,"code":"import _classCallCheck from \"/Users/ying/Dropbox/VHV/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ying/Dropbox/VHV/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ying/Dropbox/VHV/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ying/Dropbox/VHV/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ying/Dropbox/VHV/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ying/Dropbox/VHV/frontend/src/drawing.js\";\nimport React from 'react';\nimport MtSvgLines from 'react-mt-svg-lines';\n\nvar DrawArea =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DrawArea, _React$Component);\n\n  function DrawArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DrawArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DrawArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(DrawArea, [{\n    key: \"_reset_path\",\n    value: function _reset_path() {\n      this.setState({\n        profileOrError: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // It's preferable in most cases to wait until after mounting to load data.\n      // See below for a bit more context...\n      this._reset_path(); //this.setState({ offset: this.path.current.getTotalLength() });\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.profileOrError === null) {\n        // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n        this._reset_path(); //this.setState({ offset: this.path.current.getTotalLength() });\n\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.profileOrError === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"loading...\");\n      } else {\n        var offset = this.state.offset;\n        return React.createElement(\"div\", {\n          className: \"drawarea\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(MtSvgLines, {\n          animate: true,\n          duration: 2000,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"svg\", {\n          x: \"0\",\n          y: \"0\",\n          viewBox: \"0 0 500 500\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          d: this.state.svg_path,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }))));\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      // Store prevUserId in state so we can compare when props change.\n      // Clear out any previously-loaded user data (so we don't render stale stuff).\n      console.log(nextProps.svg_path);\n      console.log(prevState.svg_path);\n\n      if (nextProps.svg_path !== prevState.svg_path) {\n        return {\n          svg_path: nextProps.svg_path,\n          profileOrError: null\n        };\n      } // No state update necessary\n\n\n      return null;\n    }\n  }]);\n\n  return DrawArea;\n}(React.Component);\n\nexport default DrawArea;","map":{"version":3,"sources":["/Users/ying/Dropbox/VHV/frontend/src/drawing.js"],"names":["React","MtSvgLines","DrawArea","state","setState","profileOrError","_reset_path","prevProps","prevState","offset","svg_path","nextProps","console","log","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;IAGMC,Q;;;;;;;;;;;;;;;;;UACFC,K,GAAQ,E;;;;;;kCAEM;AACV,WAAKC,QAAL,CAAc;AAACC,QAAAA,cAAc,EAAE;AAAjB,OAAd;AACH;;;wCAkBmB;AAChB;AACA;AACA,WAAKC,WAAL,GAHgB,CAIhB;;AACH;;;uCAEkBC,S,EAAWC,S,EAAW;AACrC,UAAI,KAAKL,KAAL,CAAWE,cAAX,KAA8B,IAAlC,EAAwC;AACtC;AACA,aAAKC,WAAL,GAFsC,CAGtC;;AACD;AACJ;;;6BAEQ;AACL,UAAI,KAAKH,KAAL,CAAWE,cAAX,KAA8B,IAAlC,EAAwC;AACpC,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAR;AACH,OAFD,MAEO;AAAA,YACKI,MADL,GACgB,KAAKN,KADrB,CACKM,MADL;AAEH,eACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAG,IAAtB;AAA6B,UAAA,QAAQ,EAAG,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAK,UAAA,CAAC,EAAC,GAAP;AAAW,UAAA,CAAC,EAAC,GAAb;AAAiB,UAAA,OAAO,EAAC,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAM,UAAA,CAAC,EAAE,KAAKN,KAAL,CAAWO,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,CADA,CADJ;AAUS;AAChB;;;6CA/C+BC,S,EAAWH,S,EAAW;AAClD;AACA;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACD,QAAtB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACE,QAAtB;;AACA,UAAIC,SAAS,CAACD,QAAV,KAAuBF,SAAS,CAACE,QAArC,EAA+C;AAC7C,eAAO;AACLA,UAAAA,QAAQ,EAAEC,SAAS,CAACD,QADf;AAELL,UAAAA,cAAc,EAAE;AAFX,SAAP;AAID,OAViD,CAYlD;;;AACA,aAAO,IAAP;AACH;;;;EArBkBL,KAAK,CAACc,S;;AA0D3B,eAAeZ,QAAf","sourcesContent":["import React from 'react';\nimport MtSvgLines from 'react-mt-svg-lines';  \n\n\nclass DrawArea extends React.Component {\n    state = {}\n\n    _reset_path() {\n        this.setState({profileOrError: true});\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        // Store prevUserId in state so we can compare when props change.\n        // Clear out any previously-loaded user data (so we don't render stale stuff).\n        console.log(nextProps.svg_path);\n        console.log(prevState.svg_path);\n        if (nextProps.svg_path !== prevState.svg_path) {\n          return {\n            svg_path: nextProps.svg_path,\n            profileOrError: null,\n          };\n        }\n    \n        // No state update necessary\n        return null;\n    }\n\n    componentDidMount() {\n        // It's preferable in most cases to wait until after mounting to load data.\n        // See below for a bit more context...\n        this._reset_path();\n        //this.setState({ offset: this.path.current.getTotalLength() });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.profileOrError === null) {\n          // At this point, we're in the \"commit\" phase, so it's safe to load the new data.\n          this._reset_path();\n          //this.setState({ offset: this.path.current.getTotalLength() });\n        }\n    }\n\n    render() {\n        if (this.state.profileOrError === null) {\n            return (<div>loading...</div>);\n        } else {\n            const { offset } = this.state\n            return (\n                <div className='drawarea'>\n                <MtSvgLines animate={ true } duration={ 2000 }>\n                    <svg x=\"0\" y=\"0\" viewBox=\"0 0 500 500\" >\n                        <path d={this.state.svg_path}/>\n                            {/* {this.props.svg_path.map(item => (<path d={item} />))} */}\n                    </svg>\n                </MtSvgLines>\n                </div>\n            );\n                    }\n    }\n\n  }\n\n  export default DrawArea;"]},"metadata":{},"sourceType":"module"}